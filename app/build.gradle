plugins {
    id 'com.android.application'
    id 'kotlin-android'
//    id 'jacoco'
    id "org.sonarqube" version "3.3"
}
//apply plugin: 'jacoco'
//
//jacoco {
//    toolVersion = '0.8.5'
//}

ext.versionMajor = 1
ext.versionMinor = 0
ext.versionPatch = 1
ext.versionClassifier = null
ext.isSnapShot = false
ext.minSdkVersion = 21

private Integer generateVersionCode() {
    return ext.minSdkVersion * 10000000 + ext.versionMajor * 10000 +
            ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"

    if (ext.versionClassifier == null) {
        if (ext.isSnapShot) {
            ext.versionClassifier = "SNAPSHOT"
        }
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifer
    }

    return versionName
}

android {
    signingConfigs {
        release {
            storeFile file('../circleci.jks')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.circlecii"
        minSdkVersion 16
        targetSdkVersion 31
        versionName generateVersionName()
        versionCode generateVersionCode()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            testCoverageEnabled false
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

sonarqube {
    properties {
        property "sonar.projectKey", "com.example.circlecii"
        property "sonar.organization", "nidoorg"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login" , "d3fd1bcdfbb160888d83bdb723e39193b2ca5214"
        property "sonar.sources","src/main/java"
        property "sonar.language","java"
        property "sonar.sourceEncoding", "UTF-8"

        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
        property "sonar.java.binaries", "build/tmp/kotlin-classes"
        property "sonar.java.test.binaries", "build/intermediates/classes/test/,build/tmp/kotlin-classes/devDebugUnitTest"
        property "sonar.tests","src/test/java"
//        property "sonar.sources","src/main/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths","build/jacoco/testDevDebugUnitTest.exec"
        property "sonar.junit.reportsPath","build/test-results/testDevDebugUnitTest"
    }
}

//testOptions {
//    unitTests {
//        includeAndroidResources = true
//        unitTests.returnDefaultValues = true
//    }
//}

//task jacocoTestReport(type: JacocoReport,
//        dependsOn: ['testDebugUnitTest',
//                    'createDebugCoverageReport']) {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['androidx/**/*.*',
//                      '**/view/*.*',
//                      '**/data/*.*',
//                      '**/data/model/*.*',
//                      '**/generated/callback/*.*',
//                      '**/lambda$*.class',
//                      '**/lambda.class',
//                      '**/*lambda.class',
//                      '**/*lambda*.class']
//
//    def debugTree = fileTree(dir:
//            "${buildDir}/intermediates/javac/debug/classes",
//            excludes: fileFilter
//    )
//
//    def mainSrc = "/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: "${buildDir}", includes:[
//            "/jacoco/testDebugUnitTest.exec"])
//}


//jacocoTestReport {
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}